/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Tue Jan 11 2022 13:14:10 GMT-0600 (Central Standard Time).
 */

define(['css!./styles/TextualJSONEditorWidget.css', 'vs/loader','vs/editor/editor.main'], function () {
    'use strict';

    var WIDGET_CLASS = 'textual-j-s-o-n-editor';

    function TextualJSONEditorWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;
        this._control = null;
        this._editor = null;

        this.nodes = {};
        this._initialize();
        

        this._logger.debug('ctor finished');
    }

    TextualJSONEditorWidget.prototype._initialize = function () {
        // console.log(monaco);
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);
        this._el.append('<div id="monaco_container" style=“width:100%;height:100%;”></div>');
    };

    TextualJSONEditorWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    TextualJSONEditorWidget.prototype.setJSON = function (JSONvalue) {

        if (this._editor === null) {
            this._editor = monaco.editor.create(document.getElementById('monaco_container'), {
                language: 'json',
                contextmenu: false,
                minimap: { enabled: false },
                fixedOverflowWidgets: false,
                /*overflowWidgetsDomNode: document.getElementsByClassName('textual-j-s-o-n-editor')[0]*/
            });
            monaco.languages.json.jsonDefaults.setDiagnosticsOptions({validate: true});
            this._editor.getModel().onDidChangeContent((event) => {
                if(this._editor.getModel().getValue() !== JSONvalue) {
                    this._control.onJsonValidityChanged(this.isJSONValid());
                } else {
                    this._control.onJsonValidityChanged(false);
                }
            });
        }

        monaco.editor.onDidChangeMarkers((event) => {
            console.log(event);
            if (this._control) {
                this._control.onJsonValidityChanged(this.isJSONValid());
            }
        });
        this._editor.getModel().setValue(JSONvalue);
    };

    TextualJSONEditorWidget.prototype.getJSON = function () {
        if (this._editor === null) {
            return null;
        } else if (this.isJSONValid()) {
            return this._editor.getModel().getValue();
        } else {
            return null;
        }
    };

    TextualJSONEditorWidget.prototype.isJSONValid = function () {
        if (this._editor === null) {
            return false;
        } else {
            return monaco.editor.getModelMarkers().length === 0;
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    TextualJSONEditorWidget.prototype.destroy = function () {
    };

    TextualJSONEditorWidget.prototype.onActivate = function (control) {
        this._logger.debug('TextualJSONEditorWidget has been activated');
        this._control = control
    };

    TextualJSONEditorWidget.prototype.onDeactivate = function () {
        this._logger.debug('TextualJSONEditorWidget has been deactivated');
        this._control = null;
    };

    return TextualJSONEditorWidget;
});
