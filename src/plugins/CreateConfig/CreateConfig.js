/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Sun Jan 02 2022 19:16:15 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'webgme-json/jsonFunctions'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    JsonFunctions) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of CreateConfig.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin CreateConfig.
     * @constructor
     */
    function CreateConfig() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    CreateConfig.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    CreateConfig.prototype = Object.create(PluginBase.prototype);
    CreateConfig.prototype.constructor = CreateConfig;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    CreateConfig.prototype.main = function (callback) {
        const self = this;
        const core = self.core;
        const configNode = self.activeNode;
        const META = self.META;
        let nodes = null;
        const config = self.getCurrentConfig();

        
        if(!core.isInstanceOf(configNode, META.ArrayElement)) {
            self.logger.error('Config is an array of objects!!');
            callback(new Error('Config must be an array of objects!'), null);
            return;
        }

        core.loadSubTree(configNode)
        .then(nodes_ => {
            nodes = {};
            nodes_.forEach(node => {
                nodes[core.getPath(node)] = node;
            });

            core.getChildrenPaths(configNode).forEach(path => {
                let child = nodes[path];
                if(!core.isInstanceOf(child, META.ObjectElement)) {
                    throw new Error('Config elements must be objects!');
                }
            });

            const result = JSON.parse(JsonFunctions.JSONHierarchyToString(nodes, configNode, core, META, self.logger));

            let base = result[0] || {};

            for(let i=1; i<result.length; i+=1) {
                base = JsonFunctions.appendJSON(base, result[i]);
            }
            
            return self.blobClient.putFile((config.name || 'config')+'.json', JSON.stringify(base, null, 2));
        })
        .then(filehash => {
            self.result.addArtifact(filehash);
            self.result.setSuccess(true);
            callback(null, self.result);
        })
        .catch(err => {
            self.logger.error(err.stack);
            callback(err, null);
        });
    }

    return CreateConfig;
});
