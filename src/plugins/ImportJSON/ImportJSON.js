/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Sun Jan 02 2022 18:33:48 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'q'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    Q) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ImportJSON.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ImportJSON.
     * @constructor
     */
    function ImportJSON() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ImportJSON.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    ImportJSON.prototype = Object.create(PluginBase.prototype);
    ImportJSON.prototype.constructor = ImportJSON;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    ImportJSON.prototype.main = function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.
        const self = this;
        const config = self.getCurrentConfig();

        if (!config.json) {
            self.logger.error('The source of the object is missing');
            callback(false);
        } else {
            self.blobClient.getObjectAsJSON(config.json)
            .then(input => {
                self.import(config.name || 'import', input, config.isType === true);
                return self.save('Imported JSON');
            })
            .then(() => {
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(err => {
                self.logger.error(err.stack);
                callback(err, null);

            })
        }
    };

    ImportJSON.prototype.getParentFolder = function(isType) {
        const self = this;
        const META = self.META;

        if(isType) {
            return META['Types'];
        } else {
            return META['Instances'];
        }
    };

    ImportJSON.prototype.buildFromInput = function (name, jsonObject, parentNode) {
        const self = this;
        const core = self.core;
        const META = self.META;
        let fullNode = null;

        const buildObject = function (jsonSegment, node) {
            const keys = Object.keys(jsonSegment);
            keys.forEach(key => {
                let newNode = null;
                if(typeof jsonSegment[key] === 'string') {
                    newNode = core.createChild(node, META['StringElement']);
                    core.setAttribute(newNode, 'name', key);
                    core.setAttribute(newNode, 'value', jsonSegment[key]);
                } else if (typeof jsonSegment[key] === 'number') {
                    newNode = core.createChild(node, META['NumberElement']);
                    core.setAttribute(newNode, 'name', key);
                    core.setAttribute(newNode, 'value', jsonSegment[key]);
                } else if (typeof jsonSegment[key] === 'boolean') {
                    newNode = core.createChild(node, META['BooleanElement']);
                    core.setAttribute(newNode, 'name', key);
                    core.setAttribute(newNode, 'value', jsonSegment[key]);
                } else if (Array.isArray(jsonSegment[key])) {
                    newNode = core.createChild(node, META['ArrayElement']);
                    core.setAttribute(newNode, 'name', key);
                    buildArray(jsonSegment[key], newNode);
                } else if (typeof jsonSegment[key] === 'object') {
                    newNode = core.createChild(node, META['ObjectElement']);
                    core.setAttribute(newNode, 'name', key);
                    buildObject(jsonSegment[key], newNode);
                } else {
                    throw new Error('Unknown input element!!!');
                }
            })
        };

        const buildArray = function (jsonSegment, node) {
            jsonSegment.forEach(element, index => {
                let newNode = null;
                if(typeof element === 'string') {
                    newNode = core.createChild(node, META['StringElement']);
                    core.setAttribute(newNode, 'name', index);
                    core.setAttribute(newNode, 'value', element);
                } else if (typeof element === 'number') {
                    newNode = core.createChild(node, META['NumberElement']);
                    core.setAttribute(newNode, 'name', index);
                    core.setAttribute(newNode, 'value', element);
                } else if (typeof element === 'boolean') {
                    newNode = core.createChild(node, META['BooleanElement']);
                    core.setAttribute(newNode, 'name', index);
                    core.setAttribute(newNode, 'value', element);
                } else if (Array.isArray(element)) {
                    newNode = core.createChild(node, META['ArrayElement']);
                    core.setAttribute(newNode, 'name', index);
                    buildArray(element, newNode);
                } else if (typeof element === 'object') {
                    newNode = core.createChild(node, META['ObjectElement']);
                    core.setAttribute(newNode, 'name', index);
                    buildObject(element, newNode);
                } else {
                    throw new Error('Unknown input element!!!');
                }
            });
        };

        if (Array.isArray(jsonObject)) {
            fullNode = core.createChild(parentNode, META['ArrayElement']);
            core.setAttribute(fullNode, 'name', name);
            buildArray(jsonObject, fullNode);
        } else if (typeof jsonObject === 'object') {
            fullNode = core.createChild(parentNode, META['ObjectElement']);
            core.setAttribute(fullNode, 'name', name);
            buildObject(jsonObject, fullNode);
        } else {
            throw new Error('Invalid input');
        }

    };

    ImportJSON.prototype.import = function(name, jsonObject, isType) {
        const self = this;

        const parent = self.getParentFolder(isType)
        self.buildFromInput(name, jsonObject, parent);
    };

    return ImportJSON;
});
