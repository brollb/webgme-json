/*globals define*/
/*eslint-env node, browser*/

/**
 * Generated by PluginGenerator 2.20.5 from webgme on Thu Jan 13 2022 06:02:50 GMT-0600 (Central Standard Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase',
    'webgme-json/jsonFunctions'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase,
    JsonFunctions) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of ModelToJSON.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin ModelToJSON.
     * @constructor
     */
    function ModelToJSON() {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    }

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructure etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    ModelToJSON.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    ModelToJSON.prototype = Object.create(PluginBase.prototype);
    ModelToJSON.prototype.constructor = ModelToJSON;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(Error|null, plugin.PluginResult)} callback - the result callback
     */
    ModelToJSON.prototype.main = function (callback) {
        // Use this to access core, project, result, logger etc from PluginBase.
        const self = this;
        const core = self.core;
        const JsonObjectNode = self.activeNode;
        const META = self.META;
        let nodes = null;
        const config = self.getCurrentConfig();

        
        if(!core.isInstanceOf(JsonObjectNode,META.ObjectElement) && !core.isInstanceOf(JsonObjectNode,META.ArrayElement)) {
            self.logger.error('Only arrays and objects can be exported!!');
            callback(new Error('Only objects and arrays can be exported!!!'), null);
            return;
        }

        core.loadSubTree(JsonObjectNode)
        .then(nodes_ => {
            nodes = {};
            nodes_.forEach(node => {
                nodes[core.getPath(node)] = node;
            });

            const result = JsonFunctions.JSONHierarchyToString(nodes, JsonObjectNode, core, META, self.logger);
            
            self.result.setSuccess(true);
            self.createMessage(JsonObjectNode, result, 'info');
            callback(null, self.result);
        })
        .catch(err => {
            self.logger.error(err.stack);
            callback(err, null);
        });
    };

    return ModelToJSON;
});
